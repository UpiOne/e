import asyncio
import logging
import sys
import urllib.parse # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL
import aiohttp  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Firebase
import json     # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
import html as html_escape  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å html –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, BotCommand, BotCommandScopeDefault

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BOT_TOKEN = "7647669248:AAFxNs-rHgTJAbMxhS3-eWECJZ2sd5Rzusw" # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
# –ë–∞–∑–æ–≤—ã–π URL –∏–≥—Ä—ã –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
BASE_GAME_URL = "https://upione.github.io/e/"

# --- Firebase –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# URL –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ FirebaseManager.cs -> FirebaseConfig -> databaseURL
# –î–ª—è REST API –∫ Firebase –¥–æ–±–∞–≤–ª—è–µ–º ".json" –≤ –∫–æ–Ω—Ü–µ URL –∑–∞–ø—Ä–æ—Å–∞
FIREBASE_DB_URL = "https://test-cd618-default-rtdb.europe-west1.firebasedatabase.app"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
logging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(asctime)s - %(levelname)s - %(message)s')
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /play ---
@dp.message(CommandStart())
@dp.message(Command("play"))
async def send_game_button(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ userId –∏ userName.
    """
    user = message.from_user
    user_id = str(user.id) # Firebase –∫–ª—é—á–∏ - —Å—Ç—Ä–æ–∫–∏
    user_name = user.full_name
    # –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
    encoded_user_name = urllib.parse.quote(user_name)

    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ /play –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")

    if not BASE_GAME_URL or BASE_GAME_URL == "–°–Æ–î–ê_–í–ê–®_HTTPS_URL_–ò–ì–†–´_–°_GITHUB_PAGES":
         logging.warning("BASE_GAME_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
         await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, URL –∏–≥—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
         return

    try:
        # 1. –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        # –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π —Ö–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (?)
        # GitHub Pages –∏ Netlify –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.
        game_url_with_params = f"{BASE_GAME_URL}?userId={user_id}&userName={encoded_user_name}"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {game_url_with_params}")

        # 2. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç WebAppInfo —Å –£–ù–ò–ö–ê–õ–¨–ù–´–ú URL
        web_app_info = WebAppInfo(url=game_url_with_params)

        # 3. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        play_button = InlineKeyboardButton(
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ò–≥—Ä—É!",
            web_app=web_app_info
        )
        
        leaderboard_button = InlineKeyboardButton(
            text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            callback_data="show_leaderboard"
        )

        # 4. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [play_button],
            [leaderboard_button]
        ])

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {html.bold(user_name)}!\n\n"
            "–ì–æ—Ç–æ–≤ —É–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è? üòâ\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=inline_keyboard
        )
        logging.info(f"–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
        await message.answer("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard ---
@dp.message(Command("leaderboard"))
async def show_leaderboard_command(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /leaderboard
    """
    user_id = str(message.from_user.id)
    await fetch_and_show_leaderboard(message, user_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ---
@dp.message(Command("help"))
async def show_help(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞
    """
    help_text = (
        "üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/play - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üçÄ"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile ---
@dp.message(Command("profile"))
async def show_profile(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    user = message.from_user
    user_id = str(user.id)
    user_name = user.full_name
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ Firebase
        url = f"{FIREBASE_DB_URL}/scores/{user_id}.json"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                
                player_data = await response.json()
                
                if not player_data:
                    # –ò–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª
                    profile_text = (
                        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
                        f"–ò–º—è: {html_escape.escape(user_name)}\n"
                        f"ID: {user_id}\n\n"
                        f"–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞–∂–º–∏—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    max_score = player_data.get('maxScore', 0)
                    last_update = player_data.get('lastUpdate', 0)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    last_played = "–ù–∏–∫–æ–≥–¥–∞"
                    if last_update:
                        from datetime import datetime
                        date_obj = datetime.fromtimestamp(last_update / 1000)  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                        last_played = date_obj.strftime('%d.%m.%Y %H:%M')
                    
                    profile_text = (
                        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
                        f"–ò–º—è: {html_escape.escape(player_data.get('name', user_name))}\n"
                        f"ID: {user_id}\n\n"
                        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                        f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max_score} –æ—á–∫–æ–≤\n"
                        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {last_played}\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!"
                    )
                
                await message.answer(profile_text, parse_mode=ParseMode.HTML)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ---
@dp.callback_query(lambda c: c.data == "show_leaderboard")
async def show_leaderboard_callback(callback_query):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    user_id = str(callback_query.from_user.id)
    await callback_query.answer()  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
    await fetch_and_show_leaderboard(callback_query.message, user_id)

async def fetch_and_show_leaderboard(message, user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ Firebase –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ Firebase
        if not FIREBASE_DB_URL or FIREBASE_DB_URL == "YOUR_DATABASE_URL":
            logging.error("Firebase URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. Firebase URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return
            
        logging.info(f"–ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        async with aiohttp.ClientSession() as session:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ maxScore (—É–±—ã–≤–∞–Ω–∏—é)
            top_players_url = f"{FIREBASE_DB_URL}/scores.json?orderBy=\"maxScore\"&limitToLast=10"
            logging.info(f"–ó–∞–ø—Ä–æ—Å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤: {top_players_url}")
            
            async with session.get(top_players_url) as response:
                if response.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Firebase: {response.status}")
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                
                top_players_data = await response.json()
                
                if not top_players_data:
                    await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞! –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ä–µ–∫–æ—Ä–¥! üèÜ")
                    return
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                top_players = []
                for player_id, player_data in top_players_data.items():
                    if isinstance(player_data, dict) and 'maxScore' in player_data:
                        entry = {
                            'id': player_id,
                            'name': player_data.get('name', 'Unknown'),
                            'maxScore': player_data.get('maxScore', 0)
                        }
                        top_players.append(entry)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
                top_players.sort(key=lambda x: x['maxScore'], reverse=True)
                
                # 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
                player_info = None
                player_rank = -1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ —Å—Ä–µ–¥–∏ —Ç–æ–ø-10
                for i, player in enumerate(top_players):
                    if player['id'] == user_id:
                        player_info = player
                        player_rank = i + 1
                        break
                
                # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ —Ç–æ–ø-10, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                if not player_info:
                    player_url = f"{FIREBASE_DB_URL}/scores/{user_id}.json"
                    logging.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: {player_url}")
                    
                    async with session.get(player_url) as player_response:
                        if player_response.status == 200:
                            player_data = await player_response.json()
                            if player_data and 'maxScore' in player_data:
                                player_info = {
                                    'id': user_id,
                                    'name': player_data.get('name', 'Unknown'),
                                    'maxScore': player_data.get('maxScore', 0)
                                }
                                
                                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞
                                # –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –±–æÃÅ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º
                                rank_url = f"{FIREBASE_DB_URL}/scores.json?orderBy=\"maxScore\"&startAt={player_info['maxScore'] + 1}&shallow=true"
                                logging.info(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: {rank_url}")
                                
                                async with session.get(rank_url) as rank_response:
                                    if rank_response.status == 200:
                                        better_players_data = await rank_response.json()
                                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –±–æÃÅ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º + 1 = —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞
                                        better_count = len(better_players_data) if better_players_data else 0
                                        player_rank = better_count + 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = "üèÜ <b>–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í</b> üèÜ\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
            for i, entry in enumerate(top_players):
                rank = i + 1
                name = html_escape.escape(entry.get('name', 'Unknown'))
                score = entry.get('maxScore', 0)
                
                # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
                if entry.get('id') == user_id:
                    message_text += f"{rank}. üëâ <b>{name}</b>: {score} –æ—á–∫–æ–≤\n"
                else:
                    message_text += f"{rank}. {name}: {score} –æ—á–∫–æ–≤\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ç–æ–ø-10
            if player_info and player_rank > 10:
                message_text += f"\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{player_rank}. <b>{html_escape.escape(player_info.get('name', 'Unknown'))}</b>: {player_info.get('maxScore', 0)} –æ—á–∫–æ–≤"
            elif not player_info:
                message_text += "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ. –°—ã–≥—Ä–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(message_text, parse_mode=ParseMode.HTML)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}", exc_info=True)
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Firebase ---
@dp.message(Command("debug_firebase"))
async def debug_firebase(message: Message):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ Firebase
    """
    try:
        url = f"{FIREBASE_DB_URL}.json"
        logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã: {url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Firebase: {response.status}")
                    return
                
                data = await response.json()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                result = "üìä <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
                
                if not data:
                    result += "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
                else:
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ—Ä–Ω–µ–≤—ã–º —É–∑–ª–∞–º
                    for key, value in data.items():
                        if isinstance(value, dict):
                            count = len(value)
                            result += f"‚Ä¢ <b>{key}</b>: {count} –∑–∞–ø–∏—Å–µ–π\n"
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                            if count > 0:
                                sample_key = next(iter(value))
                                sample_value = value[sample_key]
                                if isinstance(sample_value, dict):
                                    result += f"  ‚îî –ü—Ä–∏–º–µ—Ä ({sample_key}): {json.dumps(sample_value, ensure_ascii=False)[:100]}...\n"
                        else:
                            result += f"‚Ä¢ <b>{key}</b>: {type(value).__name__}\n"
                
                await message.answer(result, parse_mode=ParseMode.HTML)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ Firebase: {e}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main() -> None:
    if BOT_TOKEN == "–í–ê–®_–°–£–ü–ï–†_–°–ï–ö–†–ï–¢–ù–´–ô_–ë–û–¢_–¢–û–ö–ï–ù": # –ó–∞–º–µ–Ω–∏–ª –Ω–∞ —Ç–≤–æ–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–∑–Ω–∞
        logging.critical("!!! –û–®–ò–ë–ö–ê: –ë–æ—Ç-—Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω!")
        return

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞
    commands = [
        BotCommand(command="play", description="üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É"),
        BotCommand(command="leaderboard", description="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"),
        BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å")
    ]
    
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True) 